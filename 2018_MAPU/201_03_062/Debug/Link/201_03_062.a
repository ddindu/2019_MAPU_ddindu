;/*
; * 201_03_062.c
; *
; * Created: 2018-12-04 ¿ÀÈÄ 5:03:38
; * Author: Administrator
; */
;
;#include <mega128a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;#define FUNCSET 0x28 // Function set
;#define ENTMODE 0x06 // Entry mode set
;#define ALLCLR 0x01 // All crear
;#define DISPON 0x0c // Display on
;#define DISPOFF 0x08 // Display off
;#define LINE1 0x80 // 1nd line move
;#define LINE2 0xc0 // 2nd line move
;#define HOME 0x02 // cursor home
;#define LSHIFT 0x18 // display LEFT shift
;
;typedef unsigned char hangul;
;
;hangul font_0[8] = {0x01,0x09,0x15,0x15,0x09,0x01,0x01,0x01};

	.DSEG
;hangul font_1[8] = {0x1d,0x0b,0x0b,0x1d,0x01,0x0e,0x0a,0x0e};
;hangul font_2[8] = {0x09,0x1d,0x09,0x15,0x15,0x09,0x1d,0x09};
;
;void lcd_init(void);
;void lcd_string(char flash *);
;void busy(void);
;void command(unsigned char);
;void data(unsigned char);
;
;void main(void)
; 0000 0023 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0024     int i; lcd_init();
;	i -> R16,R17
;PCODE: $0000000E VOL: 0
; 0000 0025 
; 0000 0026     for(i=0;i<8;i++){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0027         command(0x40+i);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0028         data(font_0[i]);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0029     }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002A     for(i=0;i<8;i++){
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002B         command(0x48+i);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002C         data(font_1[i]);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002D     }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002E     for(i=0;i<8;i++){
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 002F         command(0x50+i);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0030         data(font_2[i]);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0031     }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0032     command(HOME);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0033     lcd_string("My Name is ");
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0034     data (0x00); data(0x01); data(0x02);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0035     while(1);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0036 }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;
;    //LCD initial
;void lcd_init(void){
; 0000 003A void lcd_init(void){
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 003B     DDRC = 0xff;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003C     PORTC &= 0xfb;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 003D     delay_ms(15);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 003E     command(0x20);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 003F     delay_us(5);
;PCODE: $0000006A VOL: 0
; 0000 0040     command(0x20);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0041     delay_us(100);
;PCODE: $0000006D VOL: 0
; 0000 0042     command(0x20);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0043     command(FUNCSET);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0044     command(DISPON);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0045     command(ALLCLR);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0046     command(ENTMODE);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0047 }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;    //string print
;void lcd_string(char flash *pStr){
; 0000 0049 void lcd_string(char flash *pStr){
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 004A     while(*pStr) data(*pStr++);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;	*pStr -> R16,R17
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 004B }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;    //instruction write
;void command(unsigned char byte){
; 0000 004D void command(unsigned char byte){
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 004E     busy();
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;	byte -> R17
;PCODE: $00000092 VOL: 0
; 0000 004F         // instruction upper byte
; 0000 0050     PORTC = (byte & 0xf0);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0051     PORTC &= 0xfe;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0052     PORTC &= 0xfd;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0053     delay_us(1);
;PCODE: $0000009A VOL: 0
; 0000 0054     PORTC |= 0x04;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0055     delay_us(1);
;PCODE: $0000009D VOL: 0
; 0000 0056     PORTC &= 0xfb;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0057 
; 0000 0058     //instruction lower byte
; 0000 0059     PORTC = ((byte<<4) & 0xf0);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 005A     PORTC &= 0xfe;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 005B     PORTC &= 0xfd;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 005C     delay_us(1);
;PCODE: $000000A8 VOL: 0
; 0000 005D     PORTC |= 0x04;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 005E     delay_us(1);
;PCODE: $000000AB VOL: 0
; 0000 005F     PORTC &= 0xfb;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0060 }
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;
;    //data write function
;void data(unsigned char byte){
; 0000 0063 void data(unsigned char byte){
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0064     busy();
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;	byte -> R17
;PCODE: $000000B5 VOL: 0
; 0000 0065 
; 0000 0066     //data upper read fuction
; 0000 0067     PORTC = ((byte<<4) & 0xf0);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0068     PORTC &= 0x01;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0069     PORTC &= 0xfd;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 006A     delay_us(1);
;PCODE: $000000BF VOL: 0
; 0000 006B     PORTC |= 0x04;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 006C     delay_us(1);
;PCODE: $000000C2 VOL: 0
; 0000 006D     PORTC &= 0xfb;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 006E 
; 0000 006F }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;
;    //busy flah check - > delay time
;void busy(void){
; 0000 0072 void busy(void){
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0073     delay_ms(2);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0074 }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
